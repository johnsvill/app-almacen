// <auto-generated />
using System;
using AppWebPersonal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppWebPersonal.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200324230145_Models_Context")]
    partial class Models_Context
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppWebPersonal.Models.Categoria", b =>
                {
                    b.Property<int>("CodigoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<int?>("ProductoCodigoProducto");

                    b.HasKey("CodigoCategoria");

                    b.HasIndex("ProductoCodigoProducto");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Cliente", b =>
                {
                    b.Property<string>("Nit")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<string>("Dpi")
                        .IsRequired();

                    b.Property<int?>("EmailClienteCodigoEmail");

                    b.Property<int?>("FacturaNumeroFactura");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<int?>("TelefonoClienteCodigoTelefono");

                    b.HasKey("Nit");

                    b.HasIndex("EmailClienteCodigoEmail");

                    b.HasIndex("FacturaNumeroFactura");

                    b.HasIndex("TelefonoClienteCodigoTelefono");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Compra", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoProveedor");

                    b.Property<int?>("DetalleCompraIdDetalle");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("NumeroDocumento");

                    b.Property<decimal>("Total");

                    b.HasKey("IdCompra");

                    b.HasIndex("DetalleCompraIdDetalle");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("AppWebPersonal.Models.DetalleCompra", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<int>("CodigoProducto");

                    b.Property<int>("IdCompra");

                    b.Property<decimal>("Precio");

                    b.HasKey("IdDetalle");

                    b.ToTable("DetalleCompras");
                });

            modelBuilder.Entity("AppWebPersonal.Models.DetalleFactura", b =>
                {
                    b.Property<int>("CodigoDetalle")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<int>("CodigoProducto");

                    b.Property<decimal>("Descuento");

                    b.Property<int>("NumeroFactura");

                    b.Property<decimal>("Precio");

                    b.HasKey("CodigoDetalle");

                    b.ToTable("DetalleFacturas");
                });

            modelBuilder.Entity("AppWebPersonal.Models.EmailCliente", b =>
                {
                    b.Property<int>("CodigoEmail")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Nit")
                        .IsRequired();

                    b.HasKey("CodigoEmail");

                    b.ToTable("EmailClientes");
                });

            modelBuilder.Entity("AppWebPersonal.Models.EmailProveedor", b =>
                {
                    b.Property<int>("CodigoEmail")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoProveedor");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.HasKey("CodigoEmail");

                    b.ToTable("EmailProveedores");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Factura", b =>
                {
                    b.Property<int>("NumeroFactura")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DetalleFacturaCodigoDetalle");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Nit")
                        .IsRequired();

                    b.Property<decimal>("Total");

                    b.HasKey("NumeroFactura");

                    b.HasIndex("DetalleFacturaCodigoDetalle");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Inventario", b =>
                {
                    b.Property<int>("CodigoInventario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoProducto");

                    b.Property<int>("Entradas");

                    b.Property<DateTime>("Fecha");

                    b.Property<decimal>("Precio");

                    b.Property<int>("Salidas");

                    b.Property<string>("TipoRegistro");

                    b.HasKey("CodigoInventario");

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Producto", b =>
                {
                    b.Property<int>("CodigoProducto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoCategoria");

                    b.Property<int>("CodigoEmpaque");

                    b.Property<string>("Descripcion");

                    b.Property<int?>("DetalleCompraIdDetalle");

                    b.Property<int?>("DetalleFacturaCodigoDetalle");

                    b.Property<int>("Existencia");

                    b.Property<string>("Imagen")
                        .IsRequired();

                    b.Property<int?>("InventarioCodigoInventario");

                    b.Property<decimal>("PrecioPorDocena");

                    b.Property<decimal>("PrecioPorMayor");

                    b.Property<decimal>("PrecioUnitario");

                    b.HasKey("CodigoProducto");

                    b.HasIndex("DetalleCompraIdDetalle");

                    b.HasIndex("DetalleFacturaCodigoDetalle");

                    b.HasIndex("InventarioCodigoInventario");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Proveedor", b =>
                {
                    b.Property<int>("CodigoProveedor")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompraIdCompra");

                    b.Property<string>("ContactoPrincipal")
                        .IsRequired();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<int?>("EmailProveedorCodigoEmail");

                    b.Property<string>("Nit")
                        .IsRequired();

                    b.Property<string>("PaginaWeb")
                        .IsRequired();

                    b.Property<string>("RazonSocial")
                        .IsRequired();

                    b.Property<int?>("TelefonoProveedorCodigoTelefono");

                    b.HasKey("CodigoProveedor");

                    b.HasIndex("CompraIdCompra");

                    b.HasIndex("EmailProveedorCodigoEmail");

                    b.HasIndex("TelefonoProveedorCodigoTelefono");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("AppWebPersonal.Models.TelefonoCliente", b =>
                {
                    b.Property<int>("CodigoTelefono")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<string>("Nit")
                        .IsRequired();

                    b.Property<int>("NumeroTelefono");

                    b.HasKey("CodigoTelefono");

                    b.ToTable("TelefonoClientes");
                });

            modelBuilder.Entity("AppWebPersonal.Models.TelefonoProveedor", b =>
                {
                    b.Property<int>("CodigoTelefono")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoProveedor");

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<int>("NumeroTelefono");

                    b.HasKey("CodigoTelefono");

                    b.ToTable("TelefonoProveedores");
                });

            modelBuilder.Entity("AppWebPersonal.Models.TipoEmpaque", b =>
                {
                    b.Property<int>("CodigoEmpaque")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<int?>("ProductoCodigoProducto");

                    b.HasKey("CodigoEmpaque");

                    b.HasIndex("ProductoCodigoProducto");

                    b.ToTable("TipoEmpaques");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Categoria", b =>
                {
                    b.HasOne("AppWebPersonal.Models.Producto", "Producto")
                        .WithMany("Categorias")
                        .HasForeignKey("ProductoCodigoProducto");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Cliente", b =>
                {
                    b.HasOne("AppWebPersonal.Models.EmailCliente", "EmailCliente")
                        .WithMany("Clientes")
                        .HasForeignKey("EmailClienteCodigoEmail");

                    b.HasOne("AppWebPersonal.Models.Factura", "Factura")
                        .WithMany("Clientes")
                        .HasForeignKey("FacturaNumeroFactura");

                    b.HasOne("AppWebPersonal.Models.TelefonoCliente", "TelefonoCliente")
                        .WithMany("Clientes")
                        .HasForeignKey("TelefonoClienteCodigoTelefono");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Compra", b =>
                {
                    b.HasOne("AppWebPersonal.Models.DetalleCompra", "DetalleCompra")
                        .WithMany("Compras")
                        .HasForeignKey("DetalleCompraIdDetalle");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Factura", b =>
                {
                    b.HasOne("AppWebPersonal.Models.DetalleFactura", "DetalleFactura")
                        .WithMany("Facturas")
                        .HasForeignKey("DetalleFacturaCodigoDetalle");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Producto", b =>
                {
                    b.HasOne("AppWebPersonal.Models.DetalleCompra", "DetalleCompra")
                        .WithMany("Productos")
                        .HasForeignKey("DetalleCompraIdDetalle");

                    b.HasOne("AppWebPersonal.Models.DetalleFactura", "DetalleFactura")
                        .WithMany("Productos")
                        .HasForeignKey("DetalleFacturaCodigoDetalle");

                    b.HasOne("AppWebPersonal.Models.Inventario", "Inventario")
                        .WithMany("Productos")
                        .HasForeignKey("InventarioCodigoInventario");
                });

            modelBuilder.Entity("AppWebPersonal.Models.Proveedor", b =>
                {
                    b.HasOne("AppWebPersonal.Models.Compra", "Compra")
                        .WithMany("Proveedores")
                        .HasForeignKey("CompraIdCompra");

                    b.HasOne("AppWebPersonal.Models.EmailProveedor", "EmailProveedor")
                        .WithMany("Proveedores")
                        .HasForeignKey("EmailProveedorCodigoEmail");

                    b.HasOne("AppWebPersonal.Models.TelefonoProveedor", "TelefonoProveedor")
                        .WithMany("Proveedores")
                        .HasForeignKey("TelefonoProveedorCodigoTelefono");
                });

            modelBuilder.Entity("AppWebPersonal.Models.TipoEmpaque", b =>
                {
                    b.HasOne("AppWebPersonal.Models.Producto", "Producto")
                        .WithMany("TipoEmpaques")
                        .HasForeignKey("ProductoCodigoProducto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
